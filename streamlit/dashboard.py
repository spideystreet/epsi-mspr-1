import streamlit as st
import pandas as pd
from sqlalchemy import create_engine
import os
from dotenv import load_dotenv
import plotly.express as px
import json

# =============================================================================
# Configuration de la page
# =============================================================================
st.set_page_config(
    page_title="Dashboard √âlections",
    page_icon="üó≥Ô∏è",
    layout="wide"
)

# =============================================================================
# Connexion √† la base de donn√©es (avec cache pour la performance)
# =============================================================================
@st.cache_resource
def get_db_engine():
    """Cr√©e et retourne une connexion √† la base de donn√©es."""
    load_dotenv()
    pg_user = os.getenv("PG_USER")
    pg_password = os.getenv("PG_PASSWORD")
    pg_host = os.getenv("PG_HOST")
    pg_port = os.getenv("PG_PORT")
    pg_dbname = os.getenv("PG_DBNAME")
    
    if not all([pg_user, pg_password, pg_host, pg_port, pg_dbname]):
        st.error("Les informations de connexion √† la base de donn√©es sont manquantes. V√©rifiez votre fichier .env.")
        return None
        
    db_url = f"postgresql+psycopg2://{pg_user}:{pg_password}@{pg_host}:{pg_port}/{pg_dbname}"
    return create_engine(db_url)

# =============================================================================
# Chargement des donn√©es (avec cache pour la performance)
# =============================================================================
@st.cache_data
def load_data():
    """Charge les donn√©es depuis la vue PostgreSQL."""
    engine = get_db_engine()
    if engine:
        try:
            query = "SELECT * FROM election_data_for_bi;"
            df = pd.read_sql(query, engine)
            # Assurer que les types de donn√©es sont corrects
            df['YEAR'] = df['YEAR'].astype(int)
            df['DEPARTMENT_CODE'] = df['DEPARTMENT_CODE'].astype(str).str.zfill(2)
            return df
        except Exception as e:
            st.error(f"Erreur lors du chargement des donn√©es : {e}")
            return pd.DataFrame()
    return pd.DataFrame()

@st.cache_data
def load_geojson():
    """Charge le fichier GeoJSON des d√©partements."""
    try:
        with open('data/departements.geojson', 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        st.error("Le fichier 'data/departements.geojson' est introuvable. Ce fichier est n√©cessaire pour la carte.")
        return None

# =============================================================================
# Application Principale
# =============================================================================
st.title("üá´üá∑ Tableau de Bord des √âlections Pr√©sidentielles")

# Chargement des donn√©es
election_df = load_data()
geojson = load_geojson()

if not election_df.empty and geojson:
    
    # --- Barre lat√©rale avec les filtres ---
    st.sidebar.header("Filtres")
    
    # S√©lecteur d'ann√©e
    available_years = sorted(election_df['YEAR'].unique(), reverse=True)
    selected_year = st.sidebar.selectbox("Choisissez une ann√©e", available_years)
    
    # Filtrer les donn√©es en fonction de l'ann√©e s√©lectionn√©e
    df_filtered = election_df[election_df['YEAR'] == selected_year]
    
    # --- Affichage principal ---
    st.header(f"R√©sultats pour l'ann√©e {selected_year}")
    
    # D√©finir une palette de couleurs pour les partis
    color_map = {
        'DROITE': 'blue',
        'GAUCHE': 'red',
        'CENTRE': 'orange',
        'E.DROITE': 'darkblue',
        'E.GAUCHE': 'darkred'
    }
    
    # Carte de France
    st.subheader("Carte des r√©sultats par d√©partement")
    
    fig_map = px.choropleth_mapbox(
        df_filtered,
        geojson=geojson,
        locations='DEPARTMENT_CODE',
        featureidkey="properties.code",
        color='WINNER',
        color_discrete_map=color_map,
        mapbox_style="carto-positron",
        zoom=4.5,
        center={"lat": 46.603354, "lon": 1.888334},
        opacity=0.6,
        labels={'WINNER': 'Parti Gagnant'}
    )
    fig_map.update_layout(
        margin={"r":0,"t":0,"l":0,"b":0},
        legend_title_text='Parti Gagnant'
    )
    st.plotly_chart(fig_map, use_container_width=True)

else:
    st.warning("Impossible d'afficher le tableau de bord car les donn√©es ou le fichier GeoJSON n'ont pas pu √™tre charg√©s.")

st.info("Ce tableau de bord est g√©n√©r√© avec Streamlit et Plotly, en utilisant les donn√©es de la base PostgreSQL.") 